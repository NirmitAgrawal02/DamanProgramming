Evaluator Queries:-



1. If-then-else:
program(P, [start, int, x, =, 8,;, if,x,==,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 8,;, if,x,<=,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 11,;, if,x,<=,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 7,;, if,x,>=,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 7,;, if,x,<,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 7,;, if,x,>,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start, int, x, =, 7,;, if,not,x,>,9 , then, x, =, 7, else, x , = , 3 , fi, finish, .], []), write(P), program_eval(P,EnvOut).

2. Ternary Operator:
program(P, [start, int, x, = ,2, ;, x, == ,3 ,'?',x ,= ,x ,+, 1, ':' ,x ,= ,x ,+, 2, finish, .], []), write(P), program_eval(P,EnvOut).

3. For loop:
program(P, [start,int,y,=,0,;,for,'(',int,x,=,0,;,x,<=,2,;,x,=,x,+,1,')',begin,y,=,y,+,1,end,finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start,int,y,=,0,;,for,'(',int,x,=,0,;,x,<=,2,;,x,=,x,+,1,')',begin,y,=,y,+,1,;, print , '(' , y , ')',end,finish, .], []), write(P), program_eval(P,EnvOut).

4. While loop:
program(P, [start, int, x, = ,2, ;, while, x, '<=' ,8 ,begin,x ,= ,x ,+, 1, end, finish, .], []), write(P), program_eval(P,EnvOut).

5. Operators:
program(P, [start,int,y,=,1,;, y, =, y ,+, 2, ;, print, '(',y,')' ,finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start,int,y,=,1,;, y, =, y ,-, 2, ;, print, '(',y,')' ,finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start,int,y,=,1,;, y, =, y ,/, 2, ;, print, '(',y,')' ,finish, .], []), write(P), program_eval(P,EnvOut).
program(P, [start,int,y,=,1,;, y, =, y ,*, 2, ;, print, '(',y,')' ,finish, .], []), write(P), program_eval(P,EnvOut).

6. Parsar Queries

program(P, ['start','bool','x',=,'true',';','int', 'y', '=' ,5,';' ,'z' ,'=' ,6,'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start','int','x',';','int', 'y', '=' ,5,';' ,'y' ,'=' ,6,'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8, ';', 'int', 'y',=,2, ';', 'int', 'z', ';', 'y','=',4,  'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8, ';', 'int', 'y','=',2, ';', 'int', 'z', ';', 'y','=',4,';','z','=','x','+','y',  'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start','st','x',';','int', 'y', '=' ,5,';' ,y ,= ,6,'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'if','x','==',8 , 'then',  'x', =, 7, 'else', z , = , 0 , fi,  'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if','x','<',7 , 'then',  'x', =, 7, 'else', 'x' , = , 0 , fi,  'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if','x','>=',8 , 'then',  'x', =, 7, 'else', 'z' , = , 0 , fi,  'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if','x','<=',8 , 'then',  'x', =, 7, 'else', z , = , 0 , fi,  'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if','x','!=',8 , 'then',  'x', =, 7, 'else', 'z' , '=' , 0 , 'fi',  'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if',not,'x','==',8 , 'then',  'x', =, 7, 'else', x , = , 0 , fi,  'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', '=', 8,';', 'if','true', 'then',  'x', '=', 7, 'else', 'x' , '=' , 0 , 'fi',  'finish', '.'], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'x' ,'==', 8, '?' , 'x',=,'x','+',1 ,: ,'x',=,'x','+',2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'true',  '?' , 'x',=,'x','+',1 ,: ,'x',=,'x','+',2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', false,  '?' , 'x',=,'x','+',1 ,: ,'x',=,'x','+',2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'x','<',2,and,'x','>',9,  '?' , 'x',=,'x','+',1 ,: ,'x',=,'x','+',2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'x','<',2,or,'x','>',9,  '?' , 'x',=,'x','+',1 ,: ,'x',=,'x','+',2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start', 'int', 'x', =, 8,';', 'x','<',2,or,'x','>',9,  '?' , 'x',=,'x',*,1 ,: ,'x',=,'x',/,2, 'finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start','int','y',=,0,';','for','(','int','x',=,0,';','x','<',5,';','x',=,'x','+',1,')','begin','y',=,'y','+',1,'end','finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start','int','y',=,0,';', 'print' , '(', 'y' , ')','finish', .], []), write(P), program_eval(P,EnvOut).
program(P, ['start',st,'x', =, '"' ,a,r,t,3,'"',';','int', 'y', '=' ,5,';' ,'y' ,'=' ,6,'finish', .], []), write(P), program_eval(P,EnvOut).
program(P,['start', 'int', 'x', =, 8,';', 'if','x','!=',8 , 'then',  'x', =, 7, 'else', z , = , 0 , fi,  'finish', .] , []), write(P), program_eval(P,EnvOut).
